(()=>{"use strict";var t;!function(t){t.Point=class{x;y;constructor(t,n){this.x=t,this.y=n}},t.Triangle=class{p1;p2;p3;constructor(t,n,i){this.p1=t,this.p2=n,this.p3=i}draw(t){t.moveTo(this.p1.x,this.p1.y),t.lineTo(this.p2.x,this.p2.y),t.lineTo(this.p3.x,this.p3.y),t.lineTo(this.p1.x,this.p1.y)}},t.Rectangle=class{leftTop;width;height;constructor(t,n,i){this.leftTop=t,this.width=n,this.height=i}draw(t){const n={x:this.leftTop.x+this.width,y:this.leftTop.y+this.height};t.moveTo(this.leftTop.x,this.leftTop.y),t.lineTo(n.x,this.leftTop.y),t.lineTo(n.x,n.y),t.lineTo(this.leftTop.x,n.y),t.lineTo(this.leftTop.x,this.leftTop.y)}},t.CanvasPainter=class{canvas;constructor(t){this.canvas=t}draw(t){t.draw(this.canvas)}}}(t||(t={}));const n=t;var i;!function(t){t.CCanvas=class{moveTo(t,n){console.log(`MoveTo (${t}, ${n})`)}lineTo(t,n){console.log(`LineTo (${t}, ${n})`)}}}(i||(i={}));const o=i;var e;!function(t){t.Point=class{x;y;constructor(t,n){this.x=t,this.y=n}},t.ModernGraphicsRenderer=class{m_out;m_drawing=!1;constructor(t){this.m_out=t}beginDraw(){if(this.m_drawing)throw new Error("Drawing has already begun");this.m_out.log("<draw>"),this.m_drawing=!0}drawLine(t,n){if(!this.m_drawing)throw new Error("DrawLine is allowed between BeginDraw()/EndDraw() only");this.m_out.log(`  <line fromX="${t.x}" fromY="${t.y}" toX="${n.x}" toY="${n.y}"/>`)}endDraw(){if(!this.m_drawing)throw new Error("Drawing has not been started");this.m_out.log("</draw>"),this.m_drawing=!1}}}(e||(e={}));const s=e;class r{renderer;startPoint=null;constructor(t){this.renderer=t}moveTo(t,n){this.startPoint=new s.Point(t,n)}lineTo(t,n){if(!this.startPoint)throw new Error("MoveTo must be called before LineTo");{const i=new s.Point(t,n);this.renderer.drawLine(this.startPoint,i),this.startPoint=i}}}var a;!function(t){function i(t){const i=new n.Triangle({x:10,y:15},{x:100,y:200},{x:150,y:250}),o=new n.Rectangle({x:30,y:40},18,24);t.draw(i),t.draw(o)}t.paintPictureOnCanvas=function(){const t=new o.CCanvas;i(new n.CanvasPainter(t))},t.paintPictureOnModernGraphicsRenderer=function(){const t=new s.ModernGraphicsRenderer(console),o=new r(t);t.beginDraw(),i(new n.CanvasPainter(o)),t.endDraw()}}(a||(a={})),function(){console.log("Should we use new API (y)?");const t=prompt();"y"===t||"Y"===t?a.paintPictureOnModernGraphicsRenderer():a.paintPictureOnCanvas()}()})();