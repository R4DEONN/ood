(()=>{"use strict";class e{_observers=new Map;registerObserver(e,t=0){this._observers.has(e)||this._observers.set(e,t)}removeObserver(e){this._observers.delete(e)}notifyObservers(){const e=this.getChangedData(),t=Array.from(this._observers.entries()).sort(((e,t)=>t[1]-e[1]));for(const[r]of t)r.update(e)}getChangedData(){throw new Error("not implemented")}}class t{_minValue=1/0;_maxValue=-1/0;_accValue=0;_accCount=0;update(e){this._minValue>e&&(this._minValue=e),this._maxValue<e&&(this._maxValue=e),this._accValue+=e,++this._accCount}toString(){return`Max: ${this._maxValue}\nMin: ${this._minValue}\nAverage: ${this._accValue/this._accCount}\n----------------`}}class r{temperature=0;humidity=0;pressure=0;windSpeed=0;windDirection=0;sourceId=""}class s extends e{_temperature=0;_humidity=0;_pressure=760;_windSpeed=0;_windDirection=0;_id;constructor(e){super(),this._id=e}getTemperature(){return this._temperature}getPressure(){return this._pressure}getHumidity(){return this._humidity}measurementsChanged(){this.notifyObservers()}getWindSpeed(){return this._windSpeed}getWindDirection(){return this._windDirection}setMeasurements(e,t,r,s=0,i=0){this._humidity=t,this._temperature=e,this._pressure=r,this._windSpeed=s,this._windDirection=i,this.measurementsChanged()}getChangedData(){const e=new r;return e.humidity=this.getHumidity(),e.temperature=this.getTemperature(),e.pressure=this.getPressure(),e.sourceId=this._id,e.windDirection=this.getWindDirection(),e.windSpeed=this.getWindSpeed(),e}}const i=new s("in"),a=new s("out"),n=new class{update(e){console.log(`Source: ${e.sourceId}`),console.log(`Current Temp: ${e.temperature}`),console.log(`Current Humidity: ${e.humidity}`),console.log(`Current Pressure: ${e.pressure}`),"out"===e.sourceId&&(console.log(`Wind Speed: ${e.windSpeed} m/s`),console.log(`Wind Direction: ${e.windDirection}°`)),console.log("----------------")}};i.registerObserver(n),a.registerObserver(n);const u=new class{_weatherDataIn=this._createWeatherData();_weatherDataOut=Object.assign(this._createWeatherData(),{windSpeed:new t,windDirectionX:0,windDirectionY:0,windCount:0});update({temperature:e,humidity:t,pressure:r,sourceId:s,windSpeed:i,windDirection:a}){if("in"===s)this._weatherDataIn.temperature.update(e),this._weatherDataIn.humidity.update(t),this._weatherDataIn.pressure.update(r),console.log("Indoor"),console.log(`Temperature:\n${this._weatherDataIn.temperature}`),console.log(`Humidity:\n${this._weatherDataIn.humidity}`),console.log(`Pressure:\n${this._weatherDataIn.pressure}`);else if("out"===s){this._weatherDataOut.temperature.update(e),this._weatherDataOut.humidity.update(t),this._weatherDataOut.pressure.update(r),this._weatherDataOut.windSpeed.update(i);const s=a*(Math.PI/180);this._weatherDataOut.windDirectionX+=Math.cos(s),this._weatherDataOut.windDirectionY+=Math.sin(s),this._weatherDataOut.windCount++,console.log("Outdoor\n"),console.log(`Temperature:\n${this._weatherDataOut.temperature}`),console.log(`Humidity:\n${this._weatherDataOut.humidity}`),console.log(`Pressure:\n${this._weatherDataOut.pressure}`),console.log(`Wind Speed: ${this._weatherDataOut.windSpeed} m/s`),console.log(`Wind Direction: ${this._getAverageWindDirection()}°`)}}_getAverageWindDirection(){const e=this._weatherDataOut.windDirectionX/this._weatherDataOut.windCount,t=this._weatherDataOut.windDirectionY/this._weatherDataOut.windCount;let r=Math.atan2(t,e)*(180/Math.PI);return r<0&&(r+=360),r}_createWeatherData(){return{temperature:new t,humidity:new t,pressure:new t}}};i.registerObserver(u),a.registerObserver(u),i.setMeasurements(3,.7,760),i.setMeasurements(4,.8,761),a.setMeasurements(10,.8,761,10,90),a.setMeasurements(10,.8,761,20,270),i.removeObserver(u),i.setMeasurements(10,.8,761),i.setMeasurements(-10,.8,761)})();