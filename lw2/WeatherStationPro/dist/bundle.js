(()=>{"use strict";class e{_observers=new Map;registerObserver(e,t=0){this._observers.has(e)||this._observers.set(e,t)}removeObserver(e){this._observers.delete(e)}notifyObservers(){const e=this.getChangedData(),t=Array.from(this._observers.entries()).sort(((e,t)=>t[1]-e[1]));for(const[i]of t)i.update(e)}getChangedData(){throw new Error("not implemented")}}class t{_minValue=1/0;_maxValue=-1/0;_accValue=0;_accCount=0;update(e){this._minValue>e&&(this._minValue=e),this._maxValue<e&&(this._maxValue=e),this._accValue+=e,++this._accCount}toString(){return`Max: ${this._maxValue}\nMin: ${this._minValue}\nAverage: ${this._accValue/this._accCount}\n----------------`}}class i{temperature=0;humidity=0;pressure=0;windSpeed=0;windDirection=0}const s=new class extends e{_temperature=0;_humidity=0;_pressure=760;_windSpeed=0;_windDirection=0;getTemperature(){return this._temperature}getPressure(){return this._pressure}getHumidity(){return this._humidity}getWindSpeed(){return this._windSpeed}getWindDirection(){return this._windDirection}measurementsChanged(){this.notifyObservers()}setMeasurements(e,t,i,s,r){this._humidity=t,this._temperature=e,this._pressure=i,this._windSpeed=s,this._windDirection=r,this.measurementsChanged()}getChangedData(){const e=new i;return e.humidity=this.getHumidity(),e.temperature=this.getTemperature(),e.pressure=this.getPressure(),e.windDirection=this.getWindDirection(),e.windSpeed=this.getWindSpeed(),e}},r=new class{update(e){console.log(`Current Temp: ${e.temperature}`),console.log(`Current Humidity: ${e.humidity}`),console.log(`Current Pressure: ${e.pressure}`),console.log(`Wind Speed: ${e.windSpeed} m/s`),console.log(`Wind Direction: ${e.windDirection}Â°`),console.log("----------------")}};s.registerObserver(r);const n=new class{_temperatureData=new t;_pressureData=new t;_humidityData=new t;_windSpeedData=new t;_windDirectionX=0;_windDirectionY=0;_windCount=0;update({temperature:e,humidity:t,pressure:i,windSpeed:s,windDirection:r}){this._temperatureData.update(e),this._humidityData.update(t),this._pressureData.update(i),this._windSpeedData.update(s);const n=r*(Math.PI/180);this._windDirectionX+=Math.cos(n),this._windDirectionY+=Math.sin(n),this._windCount++,console.log(`Temperature:\n${this._temperatureData}`),console.log(`Humidity:\n${this._humidityData}`),console.log(`Pressure:\n${this._pressureData}`),console.log(`Wind speed:\n${this._windSpeedData}`),console.log(`Wind Direction:\n${this._getAverageWindDirection()} degrees`)}_getAverageWindDirection(){const e=this._windDirectionX/this._windCount,t=this._windDirectionY/this._windCount;let i=Math.atan2(t,e)*(180/Math.PI);return i<0&&(i+=360),i}};s.registerObserver(n),s.setMeasurements(3,.7,760,10,90),s.setMeasurements(4,.8,761,5,180),s.removeObserver(n),s.setMeasurements(10,.8,761,0,0),s.setMeasurements(-10,.8,761,0,0)})();